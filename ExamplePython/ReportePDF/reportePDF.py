from sqlite3 import connect

from arrow import utcnow, get
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib.pagesizes import letter
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT
from reportlab.lib.colors import black, purple, white
from reportlab.pdfgen import canvas

# CLASS PDF report
class reportPDF(object):

    # Export a list of documents and a table to a PDF file
    def __init__(self, title, header, data, namefile):
        super(reportPDF, self).__init__()

        self.title = title
        self.header = header
        self.data = data
        self.namefile = namefile

        self.style = getSampleStyleSheet()

    @staticmethod
    def _headerFooterPage(canvas, file):
        # Save the state of our canvas so we can take advantage of it
        canvas.saveState()
        style = getSampleStyleSheet()

        alignment = ParagraphStyle(name="alignment", alignment=TA_RIGHT, parent=style["Normal"])
 
        # Header
        headerName = Paragraph("simo94pasqui 1.0", style["Normal"])
        width, height = headerName.wrap(file.width, file.topMargin)
        headerName.drawOn(canvas, file.leftMargin, 736)

        date = utcnow().to("local").format("dddd, DD - MMMM - YYYY", locale="it")
        dateReport = date.replace("-", "")

        headerDate = Paragraph(dateReport, alignment)
        width, height = headerDate.wrap(file.width, file.topMargin)
        headerDate.drawOn(canvas, file.leftMargin, 736)
 
        # Footer
        footer = Paragraph("Report generated by simo94pasqui", style["Normal"])
        width, height = footer.wrap(file.width, file.bottomMargin)
        footer.drawOn(canvas, file.leftMargin, 15 * mm + (0.2 * inch))
 
        # Release Canvas
        canvas.restoreState()

    def convertData(self):
        # Convert the list of dictionaries into a list of lists to create the PDF table
        styleHeader = ParagraphStyle(name="styleHeader", alignment=TA_LEFT, fontSize=10, textColor=white, fontName="Helvetica-Bold", parent=self.style["Normal"])

        styleNormal = self.style["Normal"]
        styleNormal.alignment = TA_LEFT

        keys, names = zip(*[[k, n] for k, n in self.header])

        header = [Paragraph(name, styleHeader) for name in names]
        newData = [tuple(header)]

        for data in self.data:
            newData.append([Paragraph(str(data[key]), styleNormal) for key in keys])
            
        return newData
        
    def Export(self):
        # Export the data to a PDF file
        alignmentTitle = ParagraphStyle(name="centrar", alignment=TA_CENTER, fontSize=13, leading=10, textColor=purple, parent=self.style["Heading1"])
        
        self.width, self.high = letter

        convertData = self.convertData()
    
        table = Table(convertData, colWidths=(self.width-100)/len(self.header), hAlign="CENTER")
        table.setStyle(TableStyle([
            ("BACKGROUND", (0, 0),(-1, 0), purple),
            ("ALIGN", (0, 0),(0, -1), "LEFT"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"), # Text centered and aligned to the left
            ("INNERGRID", (0, 0), (-1, -1), 0.50, black), # Internal lines
            ("BOX", (0, 0), (-1, -1), 0.25, black), # External line (Frame)
            ]))

        history = []
        history.append(Paragraph(self.title, alignmentTitle))
        history.append(Spacer(1, 0.16 * inch))
        history.append(table)

        file = SimpleDocTemplate(self.namefile, leftMargin=50, rightMargin=50, pagesize=letter, title="Report PDF", author="simo94pasqui")
        
        try:
            file.build(history, onFirstPage=self._headerFooterPage, onLaterPages=self._headerFooterPage, canvasmaker=numberingPages)
            return "Report generated successfully."
        except PermissionError:
            return "Unexpected error: Permission denied."


# CLASS numbering Pages
class numberingPages(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        # Add page information to each page (page x of y)
        numberPages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(numberPages)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)
 
    def draw_page_number(self, conteoPaginas):
        self.drawRightString(204 * mm, 15 * mm + (0.2 * inch), "Page {} of {}".format(self._pageNumber, conteoPaginas))        


# FUNCTION generate Report
def generateReport():
    # Execute query to the database (DB_USUARIOS) and call the function Export, 
    # the which is in the reportPDF class, to this class we pass the table title,
    # the header and the data it will take
    def dict_factory(cursor, row):
        d = {}
        for idx, col in enumerate(cursor.description):
            d[col[0]] = row[idx]
        return d

    connectionDB = connect("DB_USUARIOS.db")
    connectionDB.row_factory = dict_factory # Advanced way to get results
    cursor = connectionDB.cursor()

    cursor.execute("SELECT DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO FROM USUARIOS")
    data = cursor.fetchall()
    # data = [{"DNI": "1110800310", "NOMBRE": "Andres", "APELLIDO": "Niño", "FECHA_NACIMIENTO": "06/06/2019"},
    #          {"DNI": "1110800311", "NOMBRE": "Andres", "APELLIDO": "Niño", "FECHA_NACIMIENTO": "06/06/2019"}]

    connectionDB.close()

    title = "LIST OF USERS"

    header = (
        ("DNI", "D.N.I"),
        ("NOMBRE", "NAME"),
        ("APELLIDO", "SURNAME"),
        ("FECHA_NACIMIENTO", "BIRTHDATE"),
        )

    namefile = "User List.pdf"

    reporte = reportPDF(title, header, data, namefile).Export()
    print(reporte)


# CALL FUNCTION
generateReport()
